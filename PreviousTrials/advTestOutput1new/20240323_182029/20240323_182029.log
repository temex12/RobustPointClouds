2024/03/23 18:20:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.18 (default, Sep 11 2023, 13:39:12) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1280167582
    GPU 0,1: NVIDIA RTX A4500
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30152 for x64
    GCC: n/a
    PyTorch: 1.10.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

    TorchVision: 0.11.0
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1280167582
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/03/23 18:20:41 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=48, enable=False)
backend_args = None
class_names = [
    'Car',
]
data_root = 'data/kitti/'
dataset_type = 'KittiDataset'
db_sampler = dict(
    backend_args=None,
    classes=[
        'Car',
    ],
    data_root='data/kitti/',
    info_path='data/kitti/kitti_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ], filter_by_min_points=dict(Car=5)),
    rate=1.0,
    sample_groups=dict(Car=15))
default_hooks = dict(
    checkpoint=dict(interval=-1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
eval_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
launcher = 'none'
load_from = 'C:\\Users\\temex\\Desktop\\mmdet3dProj\\adversarialTrainingOutput1\\epoch_40.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.0018
metainfo = dict(classes=[
    'Car',
])
model = dict(
    backbone=dict(
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        out_channels=[
            128,
            256,
        ],
        type='SECOND'),
    bbox_head=dict(
        anchor_generator=dict(
            ranges=[
                [
                    0,
                    -40.0,
                    -1.78,
                    70.4,
                    40.0,
                    -1.78,
                ],
            ],
            reshape_out=True,
            rotations=[
                0,
                1.57,
            ],
            sizes=[
                [
                    3.9,
                    1.6,
                    1.56,
                ],
            ],
            type='Anchor3DRangeGenerator'),
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        diff_rad_by_sin=True,
        feat_channels=512,
        in_channels=512,
        loss_bbox=dict(
            beta=0.1111111111111111,
            loss_weight=2.0,
            type='mmdet.SmoothL1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_dir=dict(
            loss_weight=0.2, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        num_classes=1,
        type='Anchor3DHead',
        use_direction_classifier=True),
    data_preprocessor=dict(
        type='Det3DDataPreprocessor',
        voxel=True,
        voxel_layer=dict(
            max_num_points=5,
            max_voxels=(
                16000,
                40000,
            ),
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            voxel_size=[
                0.05,
                0.05,
                0.1,
            ])),
    middle_encoder=dict(
        in_channels=4,
        order=(
            'conv',
            'norm',
            'act',
        ),
        sparse_shape=[
            41,
            1600,
            1408,
        ],
        type='SparseEncoder'),
    neck=dict(
        in_channels=[
            128,
            256,
        ],
        out_channels=[
            256,
            256,
        ],
        type='SECONDFPN',
        upsample_strides=[
            1,
            2,
        ]),
    test_cfg=dict(
        max_num=50,
        min_bbox_size=0,
        nms_across_levels=False,
        nms_pre=100,
        nms_thr=0.01,
        score_thr=0.1,
        use_rotate_nms=True),
    train_cfg=dict(
        allowed_border=0,
        assigner=dict(
            ignore_iof_thr=-1,
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            min_pos_iou=0.45,
            neg_iou_thr=0.45,
            pos_iou_thr=0.6,
            type='Max3DIoUAssigner'),
        debug=False,
        pos_weight=-1),
    type='VoxelNet',
    voxel_encoder=dict(type='HardSimpleVFE'))
optim_wrapper = dict(
    clip_grad=dict(max_norm=10, norm_type=2),
    optimizer=dict(
        betas=(
            0.95,
            0.99,
        ), lr=0.0018, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
param_scheduler = [
    dict(
        T_max=16,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16,
        eta_min=0.018,
        type='CosineAnnealingLR'),
    dict(
        T_max=24,
        begin=16,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40,
        eta_min=1.8e-07,
        type='CosineAnnealingLR'),
    dict(
        T_max=16,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        T_max=24,
        begin=16,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    0,
    -40,
    -3,
    70.4,
    40,
    1,
]
resume = False
submission_prefix = 'C:\\Users\\temex\\Desktop\\mmdet3dProj\\advTestOutput1new\\adv_second_kitti_results'
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    pklfile_prefix=
    'C:\\Users\\temex\\Desktop\\mmdet3dProj\\advTestOutput1new\\adv_second_kitti_results',
    type='KittiMetric')
test_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                rot_range=[
                    0,
                    0,
                ],
                scale_ratio_range=[
                    1.0,
                    1.0,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type='GlobalRotScaleTrans'),
            dict(type='RandomFlip3D'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
        ],
        type='MultiScaleFlipAug3D'),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=40, val_interval=1)
train_dataloader = dict(
    batch_size=6,
    dataset=dict(
        dataset=dict(
            ann_file='kitti_infos_train.pkl',
            backend_args=None,
            box_type_3d='LiDAR',
            data_prefix=dict(pts='training/velodyne_reduced'),
            data_root='data/kitti/',
            metainfo=dict(classes=[
                'Car',
            ]),
            modality=dict(use_camera=False, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=4,
                    type='LoadPointsFromFile',
                    use_dim=4),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    db_sampler=dict(
                        backend_args=None,
                        classes=[
                            'Car',
                        ],
                        data_root='data/kitti/',
                        info_path='data/kitti/kitti_dbinfos_train.pkl',
                        points_loader=dict(
                            backend_args=None,
                            coord_type='LIDAR',
                            load_dim=4,
                            type='LoadPointsFromFile',
                            use_dim=4),
                        prepare=dict(
                            filter_by_difficulty=[
                                -1,
                            ],
                            filter_by_min_points=dict(Car=5)),
                        rate=1.0,
                        sample_groups=dict(Car=15)),
                    type='ObjectSample'),
                dict(
                    global_rot_range=[
                        0.0,
                        0.0,
                    ],
                    num_try=100,
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    translation_std=[
                        1.0,
                        1.0,
                        0.5,
                    ],
                    type='ObjectNoise'),
                dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.95,
                        1.05,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='ObjectRangeFilter'),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='KittiDataset'),
        times=2,
        type='RepeatDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        db_sampler=dict(
            backend_args=None,
            classes=[
                'Car',
            ],
            data_root='data/kitti/',
            info_path='data/kitti/kitti_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ], filter_by_min_points=dict(Car=5)),
            rate=1.0,
            sample_groups=dict(Car=15)),
        type='ObjectSample'),
    dict(
        global_rot_range=[
            0.0,
            0.0,
        ],
        num_try=100,
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        translation_std=[
            1.0,
            1.0,
            0.5,
        ],
        type='ObjectNoise'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='ObjectRangeFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    type='KittiMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.05,
    0.05,
    0.1,
]
work_dir = 'C:\\Users\\temex\\Desktop\\mmdet3dProj\\advTestOutput1new'

2024/03/23 18:20:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/03/23 18:20:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/03/23 18:20:47 - mmengine - INFO - ------------------------------
2024/03/23 18:20:47 - mmengine - INFO - The length of test dataset: 3769
2024/03/23 18:20:47 - mmengine - INFO - The number of instances per category in the dataset:
+----------+--------+
| category | number |
+----------+--------+
| Car      | 14385  |
+----------+--------+
2024/03/23 18:20:48 - mmengine - INFO - Load checkpoint from C:\Users\temex\Desktop\mmdet3dProj\adversarialTrainingOutput1\epoch_40.pth
2024/03/23 18:21:03 - mmengine - INFO - Epoch(test) [  50/3769]    eta: 0:18:56  time: 0.3056  data_time: 0.1999  memory: 186  
2024/03/23 18:21:05 - mmengine - INFO - Epoch(test) [ 100/3769]    eta: 0:10:17  time: 0.0308  data_time: 0.0005  memory: 186  
2024/03/23 18:21:06 - mmengine - INFO - Epoch(test) [ 150/3769]    eta: 0:07:23  time: 0.0313  data_time: 0.0004  memory: 185  
2024/03/23 18:21:08 - mmengine - INFO - Epoch(test) [ 200/3769]    eta: 0:05:55  time: 0.0306  data_time: 0.0005  memory: 185  
2024/03/23 18:21:10 - mmengine - INFO - Epoch(test) [ 250/3769]    eta: 0:05:02  time: 0.0314  data_time: 0.0007  memory: 185  
2024/03/23 18:21:11 - mmengine - INFO - Epoch(test) [ 300/3769]    eta: 0:04:26  time: 0.0311  data_time: 0.0005  memory: 185  
2024/03/23 18:21:13 - mmengine - INFO - Epoch(test) [ 350/3769]    eta: 0:04:00  time: 0.0314  data_time: 0.0003  memory: 185  
2024/03/23 18:21:14 - mmengine - INFO - Epoch(test) [ 400/3769]    eta: 0:03:40  time: 0.0313  data_time: 0.0003  memory: 185  
2024/03/23 18:21:16 - mmengine - INFO - Epoch(test) [ 450/3769]    eta: 0:03:24  time: 0.0304  data_time: 0.0002  memory: 185  
2024/03/23 18:21:17 - mmengine - INFO - Epoch(test) [ 500/3769]    eta: 0:03:11  time: 0.0306  data_time: 0.0005  memory: 186  
2024/03/23 18:21:19 - mmengine - INFO - Epoch(test) [ 550/3769]    eta: 0:03:00  time: 0.0307  data_time: 0.0005  memory: 185  
2024/03/23 18:21:20 - mmengine - INFO - Epoch(test) [ 600/3769]    eta: 0:02:50  time: 0.0308  data_time: 0.0003  memory: 185  
2024/03/23 18:21:22 - mmengine - INFO - Epoch(test) [ 650/3769]    eta: 0:02:42  time: 0.0313  data_time: 0.0005  memory: 185  
2024/03/23 18:21:24 - mmengine - INFO - Epoch(test) [ 700/3769]    eta: 0:02:35  time: 0.0315  data_time: 0.0005  memory: 185  
2024/03/23 18:21:25 - mmengine - INFO - Epoch(test) [ 750/3769]    eta: 0:02:28  time: 0.0313  data_time: 0.0006  memory: 185  
2024/03/23 18:21:27 - mmengine - INFO - Epoch(test) [ 800/3769]    eta: 0:02:23  time: 0.0308  data_time: 0.0006  memory: 185  
2024/03/23 18:21:28 - mmengine - INFO - Epoch(test) [ 850/3769]    eta: 0:02:17  time: 0.0311  data_time: 0.0007  memory: 185  
2024/03/23 18:21:30 - mmengine - INFO - Epoch(test) [ 900/3769]    eta: 0:02:12  time: 0.0312  data_time: 0.0002  memory: 185  
2024/03/23 18:21:31 - mmengine - INFO - Epoch(test) [ 950/3769]    eta: 0:02:08  time: 0.0314  data_time: 0.0011  memory: 186  
2024/03/23 18:21:33 - mmengine - INFO - Epoch(test) [1000/3769]    eta: 0:02:04  time: 0.0319  data_time: 0.0006  memory: 185  
2024/03/23 18:21:34 - mmengine - INFO - Epoch(test) [1050/3769]    eta: 0:02:00  time: 0.0310  data_time: 0.0003  memory: 185  
2024/03/23 18:21:36 - mmengine - INFO - Epoch(test) [1100/3769]    eta: 0:01:56  time: 0.0313  data_time: 0.0005  memory: 185  
2024/03/23 18:21:38 - mmengine - INFO - Epoch(test) [1150/3769]    eta: 0:01:52  time: 0.0308  data_time: 0.0004  memory: 185  
2024/03/23 18:21:39 - mmengine - INFO - Epoch(test) [1200/3769]    eta: 0:01:49  time: 0.0303  data_time: 0.0005  memory: 185  
2024/03/23 18:21:41 - mmengine - INFO - Epoch(test) [1250/3769]    eta: 0:01:45  time: 0.0308  data_time: 0.0004  memory: 185  
2024/03/23 18:21:42 - mmengine - INFO - Epoch(test) [1300/3769]    eta: 0:01:42  time: 0.0311  data_time: 0.0005  memory: 185  
2024/03/23 18:21:44 - mmengine - INFO - Epoch(test) [1350/3769]    eta: 0:01:39  time: 0.0313  data_time: 0.0002  memory: 185  
2024/03/23 18:21:45 - mmengine - INFO - Epoch(test) [1400/3769]    eta: 0:01:36  time: 0.0311  data_time: 0.0002  memory: 185  
2024/03/23 18:21:47 - mmengine - INFO - Epoch(test) [1450/3769]    eta: 0:01:33  time: 0.0309  data_time: 0.0002  memory: 185  
2024/03/23 18:21:48 - mmengine - INFO - Epoch(test) [1500/3769]    eta: 0:01:31  time: 0.0312  data_time: 0.0004  memory: 185  
2024/03/23 18:21:50 - mmengine - INFO - Epoch(test) [1550/3769]    eta: 0:01:28  time: 0.0307  data_time: 0.0006  memory: 185  
2024/03/23 18:21:52 - mmengine - INFO - Epoch(test) [1600/3769]    eta: 0:01:25  time: 0.0315  data_time: 0.0007  memory: 186  
2024/03/23 18:21:53 - mmengine - INFO - Epoch(test) [1650/3769]    eta: 0:01:23  time: 0.0309  data_time: 0.0003  memory: 185  
2024/03/23 18:21:55 - mmengine - INFO - Epoch(test) [1700/3769]    eta: 0:01:20  time: 0.0314  data_time: 0.0009  memory: 186  
2024/03/23 18:21:56 - mmengine - INFO - Epoch(test) [1750/3769]    eta: 0:01:18  time: 0.0310  data_time: 0.0005  memory: 185  
2024/03/23 18:21:58 - mmengine - INFO - Epoch(test) [1800/3769]    eta: 0:01:16  time: 0.0319  data_time: 0.0006  memory: 185  
2024/03/23 18:21:59 - mmengine - INFO - Epoch(test) [1850/3769]    eta: 0:01:13  time: 0.0313  data_time: 0.0005  memory: 185  
2024/03/23 18:22:01 - mmengine - INFO - Epoch(test) [1900/3769]    eta: 0:01:11  time: 0.0313  data_time: 0.0003  memory: 185  
2024/03/23 18:22:02 - mmengine - INFO - Epoch(test) [1950/3769]    eta: 0:01:09  time: 0.0314  data_time: 0.0004  memory: 185  
2024/03/23 18:22:04 - mmengine - INFO - Epoch(test) [2000/3769]    eta: 0:01:07  time: 0.0309  data_time: 0.0004  memory: 185  
2024/03/23 18:22:06 - mmengine - INFO - Epoch(test) [2050/3769]    eta: 0:01:04  time: 0.0317  data_time: 0.0007  memory: 186  
2024/03/23 18:22:07 - mmengine - INFO - Epoch(test) [2100/3769]    eta: 0:01:02  time: 0.0312  data_time: 0.0001  memory: 185  
2024/03/23 18:22:09 - mmengine - INFO - Epoch(test) [2150/3769]    eta: 0:01:00  time: 0.0310  data_time: 0.0002  memory: 185  
2024/03/23 18:22:10 - mmengine - INFO - Epoch(test) [2200/3769]    eta: 0:00:58  time: 0.0317  data_time: 0.0006  memory: 185  
2024/03/23 18:22:12 - mmengine - INFO - Epoch(test) [2250/3769]    eta: 0:00:56  time: 0.0311  data_time: 0.0009  memory: 185  
2024/03/23 18:22:13 - mmengine - INFO - Epoch(test) [2300/3769]    eta: 0:00:54  time: 0.0309  data_time: 0.0006  memory: 185  
2024/03/23 18:22:15 - mmengine - INFO - Epoch(test) [2350/3769]    eta: 0:00:52  time: 0.0312  data_time: 0.0007  memory: 185  
2024/03/23 18:22:17 - mmengine - INFO - Epoch(test) [2400/3769]    eta: 0:00:50  time: 0.0307  data_time: 0.0004  memory: 185  
2024/03/23 18:22:18 - mmengine - INFO - Epoch(test) [2450/3769]    eta: 0:00:48  time: 0.0312  data_time: 0.0003  memory: 185  
2024/03/23 18:22:20 - mmengine - INFO - Epoch(test) [2500/3769]    eta: 0:00:46  time: 0.0313  data_time: 0.0004  memory: 185  
2024/03/23 18:22:21 - mmengine - INFO - Epoch(test) [2550/3769]    eta: 0:00:44  time: 0.0308  data_time: 0.0006  memory: 185  
2024/03/23 18:22:23 - mmengine - INFO - Epoch(test) [2600/3769]    eta: 0:00:42  time: 0.0305  data_time: 0.0006  memory: 185  
2024/03/23 18:22:24 - mmengine - INFO - Epoch(test) [2650/3769]    eta: 0:00:40  time: 0.0316  data_time: 0.0008  memory: 185  
2024/03/23 18:22:26 - mmengine - INFO - Epoch(test) [2700/3769]    eta: 0:00:38  time: 0.0305  data_time: 0.0003  memory: 186  
2024/03/23 18:22:27 - mmengine - INFO - Epoch(test) [2750/3769]    eta: 0:00:36  time: 0.0304  data_time: 0.0005  memory: 186  
2024/03/23 18:22:29 - mmengine - INFO - Epoch(test) [2800/3769]    eta: 0:00:34  time: 0.0307  data_time: 0.0009  memory: 185  
2024/03/23 18:22:30 - mmengine - INFO - Epoch(test) [2850/3769]    eta: 0:00:32  time: 0.0312  data_time: 0.0008  memory: 185  
2024/03/23 18:22:32 - mmengine - INFO - Epoch(test) [2900/3769]    eta: 0:00:31  time: 0.0308  data_time: 0.0004  memory: 185  
2024/03/23 18:22:34 - mmengine - INFO - Epoch(test) [2950/3769]    eta: 0:00:29  time: 0.0308  data_time: 0.0006  memory: 185  
2024/03/23 18:22:35 - mmengine - INFO - Epoch(test) [3000/3769]    eta: 0:00:27  time: 0.0307  data_time: 0.0004  memory: 185  
2024/03/23 18:22:37 - mmengine - INFO - Epoch(test) [3050/3769]    eta: 0:00:25  time: 0.0308  data_time: 0.0001  memory: 185  
2024/03/23 18:22:38 - mmengine - INFO - Epoch(test) [3100/3769]    eta: 0:00:23  time: 0.0313  data_time: 0.0008  memory: 185  
2024/03/23 18:22:40 - mmengine - INFO - Epoch(test) [3150/3769]    eta: 0:00:21  time: 0.0312  data_time: 0.0003  memory: 186  
2024/03/23 18:22:41 - mmengine - INFO - Epoch(test) [3200/3769]    eta: 0:00:20  time: 0.0313  data_time: 0.0006  memory: 185  
2024/03/23 18:22:43 - mmengine - INFO - Epoch(test) [3250/3769]    eta: 0:00:18  time: 0.0310  data_time: 0.0002  memory: 185  
2024/03/23 18:22:44 - mmengine - INFO - Epoch(test) [3300/3769]    eta: 0:00:16  time: 0.0318  data_time: 0.0003  memory: 185  
2024/03/23 18:22:46 - mmengine - INFO - Epoch(test) [3350/3769]    eta: 0:00:14  time: 0.0311  data_time: 0.0006  memory: 185  
2024/03/23 18:22:48 - mmengine - INFO - Epoch(test) [3400/3769]    eta: 0:00:12  time: 0.0311  data_time: 0.0002  memory: 185  
2024/03/23 18:22:49 - mmengine - INFO - Epoch(test) [3450/3769]    eta: 0:00:11  time: 0.0306  data_time: 0.0007  memory: 185  
2024/03/23 18:22:51 - mmengine - INFO - Epoch(test) [3500/3769]    eta: 0:00:09  time: 0.0312  data_time: 0.0004  memory: 185  
2024/03/23 18:22:52 - mmengine - INFO - Epoch(test) [3550/3769]    eta: 0:00:07  time: 0.0307  data_time: 0.0003  memory: 185  
2024/03/23 18:22:54 - mmengine - INFO - Epoch(test) [3600/3769]    eta: 0:00:05  time: 0.0313  data_time: 0.0007  memory: 185  
2024/03/23 18:22:55 - mmengine - INFO - Epoch(test) [3650/3769]    eta: 0:00:04  time: 0.0305  data_time: 0.0002  memory: 185  
2024/03/23 18:22:57 - mmengine - INFO - Epoch(test) [3700/3769]    eta: 0:00:02  time: 0.0309  data_time: 0.0002  memory: 185  
2024/03/23 18:22:58 - mmengine - INFO - Epoch(test) [3750/3769]    eta: 0:00:00  time: 0.0307  data_time: 0.0006  memory: 185  
2024/03/23 18:23:39 - mmengine - INFO - Results of pred_instances_3d:

----------- AP11 Results ------------

Car AP11@0.70, 0.70, 0.70:
bbox AP11:94.7875, 89.6348, 88.1208
bev  AP11:90.0908, 87.5270, 84.2197
3d   AP11:88.4626, 77.9754, 76.0240
aos  AP11:94.41, 89.05, 87.27
Car AP11@0.70, 0.50, 0.50:
bbox AP11:94.7875, 89.6348, 88.1208
bev  AP11:94.8766, 89.9176, 88.7579
3d   AP11:94.8307, 89.8176, 88.5671
aos  AP11:94.41, 89.05, 87.27

----------- AP40 Results ------------

Car AP40@0.70, 0.70, 0.70:
bbox AP40:97.6489, 92.3740, 90.8301
bev  AP40:94.3939, 88.4547, 85.2831
3d   AP40:90.6654, 80.9419, 77.3943
aos  AP40:97.25, 91.74, 89.89
Car AP40@0.70, 0.50, 0.50:
bbox AP40:97.6489, 92.3740, 90.8301
bev  AP40:97.8169, 94.7393, 91.7059
3d   AP40:97.7511, 94.5637, 91.4784
aos  AP40:97.25, 91.74, 89.89

2024/03/23 18:23:39 - mmengine - INFO - Epoch(test) [3769/3769]    Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_strict: 88.4626  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_strict: 90.0908  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_strict: 94.7875  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_strict: 77.9754  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_strict: 87.5270  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_strict: 89.6348  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_strict: 76.0240  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_strict: 84.2197  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_strict: 88.1208  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_loose: 94.8307  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_loose: 94.8766  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_loose: 94.7875  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_loose: 89.8176  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_loose: 89.9176  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_loose: 89.6348  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_loose: 88.5671  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_loose: 88.7579  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_loose: 88.1208  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_strict: 90.6654  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_strict: 94.3939  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_strict: 97.6489  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_strict: 80.9419  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_strict: 88.4547  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_strict: 92.3740  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_strict: 77.3943  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_strict: 85.2831  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_strict: 90.8301  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_loose: 97.7511  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_loose: 97.8169  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_loose: 97.6489  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_loose: 94.5637  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_loose: 94.7393  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_loose: 92.3740  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_loose: 91.4784  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_loose: 91.7059  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_loose: 90.8301  data_time: 0.0031  time: 0.0347

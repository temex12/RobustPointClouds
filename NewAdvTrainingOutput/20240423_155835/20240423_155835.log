2024/04/23 15:58:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.18 (default, Sep 11 2023, 13:39:12) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2074412654
    GPU 0,1: NVIDIA RTX A4500
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
    NVCC: Cuda compilation tools, release 11.3, V11.3.58
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30152 for x64
    GCC: n/a
    PyTorch: 1.10.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

    TorchVision: 0.11.0
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2074412654
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/04/23 15:58:42 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=48, enable=True)
backend_args = None
class_names = [
    'Car',
]
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        'models.detectors.adversarial_voxelnet',
        'models.adversarial.voxel_perturber',
    ])
data_root = 'data/kitti/'
dataset_type = 'KittiDataset'
db_sampler = dict(
    backend_args=None,
    classes=[
        'Car',
    ],
    data_root='data/kitti/',
    info_path='data/kitti/kitti_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ], filter_by_min_points=dict(Car=5)),
    rate=1.0,
    sample_groups=dict(Car=15))
default_hooks = dict(
    checkpoint=dict(interval=-1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
eval_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
input_modality = dict(use_camera=False, use_lidar=True)
launcher = 'none'
load_from = 'C:\\Users\\temex\\Desktop\\mmdet3dProj\\checkpoints\\second_hv_secfpn_8xb6-80e_kitti-3d-car-75d9305e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.0018
metainfo = dict(classes=[
    'Car',
])
model = dict(
    adversary_cfg=dict(type='VoxelPerturber'),
    backbone=dict(
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        out_channels=[
            128,
            256,
        ],
        type='SECOND'),
    bbox_head=dict(
        anchor_generator=dict(
            ranges=[
                [
                    0,
                    -40.0,
                    -1.78,
                    70.4,
                    40.0,
                    -1.78,
                ],
            ],
            reshape_out=True,
            rotations=[
                0,
                1.57,
            ],
            sizes=[
                [
                    3.9,
                    1.6,
                    1.56,
                ],
            ],
            type='Anchor3DRangeGenerator'),
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        diff_rad_by_sin=True,
        feat_channels=512,
        in_channels=512,
        loss_bbox=dict(
            beta=0.1111111111111111,
            loss_weight=2.0,
            type='mmdet.SmoothL1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_dir=dict(
            loss_weight=0.2, type='mmdet.CrossEntropyLoss', use_sigmoid=False),
        num_classes=1,
        type='Anchor3DHead',
        use_direction_classifier=True),
    data_preprocessor=dict(
        type='Det3DDataPreprocessor',
        voxel=True,
        voxel_layer=dict(
            max_num_points=5,
            max_voxels=(
                16000,
                40000,
            ),
            point_cloud_range=[
                0,
                -40,
                -3,
                70.4,
                40,
                1,
            ],
            voxel_size=[
                0.05,
                0.05,
                0.1,
            ])),
    middle_encoder=dict(
        in_channels=4,
        order=(
            'conv',
            'norm',
            'act',
        ),
        sparse_shape=[
            41,
            1600,
            1408,
        ],
        type='SparseEncoder'),
    neck=dict(
        in_channels=[
            128,
            256,
        ],
        out_channels=[
            256,
            256,
        ],
        type='SECONDFPN',
        upsample_strides=[
            1,
            2,
        ]),
    test_cfg=dict(
        max_num=50,
        min_bbox_size=0,
        nms_across_levels=False,
        nms_pre=100,
        nms_thr=0.01,
        score_thr=0.1,
        use_rotate_nms=True),
    train_cfg=dict(
        allowed_border=0,
        assigner=dict(
            ignore_iof_thr=-1,
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            min_pos_iou=0.45,
            neg_iou_thr=0.45,
            pos_iou_thr=0.6,
            type='Max3DIoUAssigner'),
        by_epoch=True,
        debug=False,
        max_epochs=2,
        pos_weight=-1,
        val_interval=1),
    type='AdversarialVoxelNet',
    voxel_encoder=dict(type='HardSimpleVFE'))
optim_wrapper = dict(
    clip_grad=dict(max_norm=10, norm_type=2),
    loss_scale='dynamic',
    optimizer=dict(
        betas=(
            0.95,
            0.99,
        ), lr=0.0018, type='AdamW', weight_decay=0.01),
    type='AmpOptimWrapper')
param_scheduler = [
    dict(
        T_max=16,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16,
        eta_min=0.018,
        type='CosineAnnealingLR'),
    dict(
        T_max=24,
        begin=16,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40,
        eta_min=1.8e-07,
        type='CosineAnnealingLR'),
    dict(
        T_max=16,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=16,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        T_max=24,
        begin=16,
        by_epoch=True,
        convert_to_iter_based=True,
        end=40,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    0,
    -40,
    -3,
    70.4,
    40,
    1,
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    type='KittiMetric')
test_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(
        flip=False,
        img_scale=(
            1333,
            800,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                rot_range=[
                    0,
                    0,
                ],
                scale_ratio_range=[
                    1.0,
                    1.0,
                ],
                translation_std=[
                    0,
                    0,
                    0,
                ],
                type='GlobalRotScaleTrans'),
            dict(type='RandomFlip3D'),
            dict(
                point_cloud_range=[
                    0,
                    -40,
                    -3,
                    70.4,
                    40,
                    1,
                ],
                type='PointsRangeFilter'),
        ],
        type='MultiScaleFlipAug3D'),
    dict(keys=[
        'points',
    ], type='Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=40, val_interval=1)
train_dataloader = dict(
    batch_size=6,
    dataset=dict(
        dataset=dict(
            ann_file='kitti_infos_train.pkl',
            backend_args=None,
            box_type_3d='LiDAR',
            data_prefix=dict(pts='training/velodyne_reduced'),
            data_root='data/kitti/',
            metainfo=dict(classes=[
                'Car',
            ]),
            modality=dict(use_camera=False, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=4,
                    type='LoadPointsFromFile',
                    use_dim=4),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    db_sampler=dict(
                        backend_args=None,
                        classes=[
                            'Car',
                        ],
                        data_root='data/kitti/',
                        info_path='data/kitti/kitti_dbinfos_train.pkl',
                        points_loader=dict(
                            backend_args=None,
                            coord_type='LIDAR',
                            load_dim=4,
                            type='LoadPointsFromFile',
                            use_dim=4),
                        prepare=dict(
                            filter_by_difficulty=[
                                -1,
                            ],
                            filter_by_min_points=dict(Car=5)),
                        rate=1.0,
                        sample_groups=dict(Car=15)),
                    type='ObjectSample'),
                dict(
                    global_rot_range=[
                        0.0,
                        0.0,
                    ],
                    num_try=100,
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    translation_std=[
                        1.0,
                        1.0,
                        0.5,
                    ],
                    type='ObjectNoise'),
                dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.95,
                        1.05,
                    ],
                    type='GlobalRotScaleTrans'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        0,
                        -40,
                        -3,
                        70.4,
                        40,
                        1,
                    ],
                    type='ObjectRangeFilter'),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='KittiDataset'),
        times=2,
        type='RepeatDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=4,
        type='LoadPointsFromFile',
        use_dim=4),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        db_sampler=dict(
            backend_args=None,
            classes=[
                'Car',
            ],
            data_root='data/kitti/',
            info_path='data/kitti/kitti_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ], filter_by_min_points=dict(Car=5)),
            rate=1.0,
            sample_groups=dict(Car=15)),
        type='ObjectSample'),
    dict(
        global_rot_range=[
            0.0,
            0.0,
        ],
        num_try=100,
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        translation_std=[
            1.0,
            1.0,
            0.5,
        ],
        type='ObjectNoise'),
    dict(flip_ratio_bev_horizontal=0.5, type='RandomFlip3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.95,
            1.05,
        ],
        type='GlobalRotScaleTrans'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            0,
            -40,
            -3,
            70.4,
            40,
            1,
        ],
        type='ObjectRangeFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='kitti_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(pts='training/velodyne_reduced'),
        data_root='data/kitti/',
        metainfo=dict(classes=[
            'Car',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=4,
                type='LoadPointsFromFile',
                use_dim=4),
            dict(
                flip=False,
                img_scale=(
                    1333,
                    800,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        rot_range=[
                            0,
                            0,
                        ],
                        scale_ratio_range=[
                            1.0,
                            1.0,
                        ],
                        translation_std=[
                            0,
                            0,
                            0,
                        ],
                        type='GlobalRotScaleTrans'),
                    dict(type='RandomFlip3D'),
                    dict(
                        point_cloud_range=[
                            0,
                            -40,
                            -3,
                            70.4,
                            40,
                            1,
                        ],
                        type='PointsRangeFilter'),
                ],
                type='MultiScaleFlipAug3D'),
            dict(keys=[
                'points',
            ], type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='KittiDataset'),
    drop_last=False,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/kitti/kitti_infos_val.pkl',
    backend_args=None,
    metric='bbox',
    type='KittiMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.05,
    0.05,
    0.1,
]
work_dir = 'C:\\Users\\temex\\Desktop\\mmdet3dProj\\NewAdvTrainingOutput'

2024/04/23 15:58:42 - mmengine - WARNING - Failed to search registry with scope "mmdet3d" in the "adversaries" registry tree. As a workaround, the current "adversaries" registry in "models" is used to build instance. This may cause unexpected failure when running the built modules. Please check whether "mmdet3d" is a correct scope, or whether the registry is initialized.
2024/04/23 15:58:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/04/23 15:58:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/04/23 15:58:43 - mmengine - INFO - Using CustomRunner for AdversarialVoxelNet
2024/04/23 15:58:43 - mmengine - INFO - load 2207 Pedestrian database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 14357 Car database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 734 Cyclist database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 1297 Van database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 488 Truck database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 224 Tram database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 337 Misc database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 56 Person_sitting database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - After filter database:
2024/04/23 15:58:43 - mmengine - INFO - load 2104 Pedestrian database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 10520 Car database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 594 Cyclist database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 826 Van database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 321 Truck database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 199 Tram database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 259 Misc database infos in DataBaseSampler
2024/04/23 15:58:43 - mmengine - INFO - load 53 Person_sitting database infos in DataBaseSampler
2024/04/23 15:58:47 - mmengine - INFO - ------------------------------
2024/04/23 15:58:47 - mmengine - INFO - The length of training dataset: 3712
2024/04/23 15:58:47 - mmengine - INFO - The number of instances per category in the dataset:
+----------+--------+
| category | number |
+----------+--------+
| Car      | 14357  |
+----------+--------+
2024/04/23 15:58:47 - mmengine - INFO - LR is set based on batch size of 48 and the current batch size is 6. Scaling the original LR by 0.125.
2024/04/23 15:58:51 - mmengine - INFO - ------------------------------
2024/04/23 15:58:51 - mmengine - INFO - The length of test dataset: 3769
2024/04/23 15:58:51 - mmengine - INFO - The number of instances per category in the dataset:
+----------+--------+
| category | number |
+----------+--------+
| Car      | 14385  |
+----------+--------+
Name of parameter - Initialization information

backbone.blocks.0.0.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.3.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.6.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.7.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.7.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.9.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.10.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.10.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.12.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.13.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.13.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.15.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.0.16.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.0.16.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.0.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.3.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.6.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.9.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.12.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.13.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.13.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.15.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.blocks.1.16.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

backbone.blocks.1.16.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

neck.deblocks.0.0.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

neck.deblocks.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

neck.deblocks.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

neck.deblocks.1.0.weight - torch.Size([256, 256, 2, 2]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

neck.deblocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

neck.deblocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

bbox_head.conv_cls.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.conv_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.conv_reg.weight - torch.Size([14, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_reg.bias - torch.Size([14]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_dir_cls.weight - torch.Size([4, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_dir_cls.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

middle_encoder.conv_input.0.weight - torch.Size([16, 3, 3, 3, 4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer1.0.0.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer1.0.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer1.0.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.0.0.weight - torch.Size([32, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.1.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.1.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.1.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.0.0.weight - torch.Size([64, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.2.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.encoder_layers.encoder_layer4.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 64]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.1.weight - torch.Size([4, 4, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.1.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.2.weight - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.2.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.4.weight - torch.Size([8, 4, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.4.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.5.weight - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.5.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.7.weight - torch.Size([16, 8, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.7.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.8.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.8.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.10.weight - torch.Size([32, 16, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.10.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.11.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.11.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.13.weight - torch.Size([16, 32, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.13.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.14.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.14.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.16.weight - torch.Size([8, 16, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.16.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.17.weight - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.17.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.19.weight - torch.Size([4, 8, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.19.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.20.weight - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.20.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.22.weight - torch.Size([4, 4, 1]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.22.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.23.weight - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  

adversary.model.23.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of AdversarialVoxelNet  
2024/04/23 15:58:53 - mmengine - INFO - Load checkpoint from C:\Users\temex\Desktop\mmdet3dProj\checkpoints\second_hv_secfpn_8xb6-80e_kitti-3d-car-75d9305e.pth
2024/04/23 15:58:53 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/04/23 15:58:53 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/04/23 15:58:53 - mmengine - INFO - Checkpoints will be saved to C:\Users\temex\Desktop\mmdet3dProj\NewAdvTrainingOutput.
2024/04/23 16:00:26 - mmengine - INFO - Epoch(train)  [1][  50/1238]  lr: 2.2527e-04  eta: 1 day, 1:28:14  time: 1.8535  data_time: 1.3486  memory: 3156  grad_norm: inf  loss: 0.2633  loss_cls: 0.0807  loss_bbox: 0.1649  loss_dir: 0.0177
2024/04/23 16:00:39 - mmengine - INFO - Epoch(train)  [1][ 100/1238]  lr: 2.2610e-04  eta: 14:32:11  time: 0.2643  data_time: 0.0026  memory: 3156  grad_norm: 0.6123  loss: 0.2348  loss_cls: 0.0732  loss_bbox: 0.1487  loss_dir: 0.0129
2024/04/23 16:00:53 - mmengine - INFO - Epoch(train)  [1][ 150/1238]  lr: 2.2748e-04  eta: 10:54:56  time: 0.2700  data_time: 0.0028  memory: 3137  grad_norm: 0.5779  loss: 0.2455  loss_cls: 0.0730  loss_bbox: 0.1583  loss_dir: 0.0143
2024/04/23 16:01:06 - mmengine - INFO - Epoch(train)  [1][ 200/1238]  lr: 2.2943e-04  eta: 9:05:42  time: 0.2677  data_time: 0.0022  memory: 3154  grad_norm: 0.6586  loss: 0.2688  loss_cls: 0.0853  loss_bbox: 0.1671  loss_dir: 0.0164
2024/04/23 16:01:19 - mmengine - INFO - Epoch(train)  [1][ 250/1238]  lr: 2.3193e-04  eta: 8:00:11  time: 0.2683  data_time: 0.0037  memory: 3135  grad_norm: 0.5353  loss: 0.2436  loss_cls: 0.0730  loss_bbox: 0.1559  loss_dir: 0.0147
2024/04/23 16:01:33 - mmengine - INFO - Epoch(train)  [1][ 300/1238]  lr: 2.3499e-04  eta: 7:16:30  time: 0.2688  data_time: 0.0023  memory: 3107  grad_norm: 0.5929  loss: 0.2449  loss_cls: 0.0760  loss_bbox: 0.1542  loss_dir: 0.0147
2024/04/23 16:01:46 - mmengine - INFO - Epoch(train)  [1][ 350/1238]  lr: 2.3861e-04  eta: 6:45:36  time: 0.2720  data_time: 0.0021  memory: 3136  grad_norm: 0.5891  loss: 0.2564  loss_cls: 0.0782  loss_bbox: 0.1637  loss_dir: 0.0144
2024/04/23 16:02:00 - mmengine - INFO - Epoch(train)  [1][ 400/1238]  lr: 2.4279e-04  eta: 6:22:10  time: 0.2700  data_time: 0.0023  memory: 3170  grad_norm: 0.5602  loss: 0.2441  loss_cls: 0.0758  loss_bbox: 0.1532  loss_dir: 0.0151
2024/04/23 16:02:13 - mmengine - INFO - Epoch(train)  [1][ 450/1238]  lr: 2.4753e-04  eta: 6:04:03  time: 0.2717  data_time: 0.0023  memory: 3152  grad_norm: 0.5842  loss: 0.2539  loss_cls: 0.0822  loss_bbox: 0.1564  loss_dir: 0.0153
2024/04/23 16:02:27 - mmengine - INFO - Epoch(train)  [1][ 500/1238]  lr: 2.5282e-04  eta: 5:49:27  time: 0.2710  data_time: 0.0022  memory: 3155  grad_norm: 0.5301  loss: 0.2340  loss_cls: 0.0713  loss_bbox: 0.1483  loss_dir: 0.0144
2024/04/23 16:02:41 - mmengine - INFO - Epoch(train)  [1][ 550/1238]  lr: 2.5867e-04  eta: 5:37:55  time: 0.2771  data_time: 0.0025  memory: 3160  grad_norm: 0.5436  loss: 0.2506  loss_cls: 0.0757  loss_bbox: 0.1585  loss_dir: 0.0163
2024/04/23 16:02:55 - mmengine - INFO - Epoch(train)  [1][ 600/1238]  lr: 2.6508e-04  eta: 5:28:02  time: 0.2736  data_time: 0.0026  memory: 3184  grad_norm: 0.5141  loss: 0.2442  loss_cls: 0.0753  loss_bbox: 0.1547  loss_dir: 0.0142
2024/04/23 16:03:08 - mmengine - INFO - Epoch(train)  [1][ 650/1238]  lr: 2.7204e-04  eta: 5:19:42  time: 0.2746  data_time: 0.0029  memory: 3153  grad_norm: 0.4947  loss: 0.2474  loss_cls: 0.0754  loss_bbox: 0.1579  loss_dir: 0.0141
2024/04/23 16:03:22 - mmengine - INFO - Epoch(train)  [1][ 700/1238]  lr: 2.7956e-04  eta: 5:12:26  time: 0.2732  data_time: 0.0035  memory: 3132  grad_norm: 0.5043  loss: 0.2487  loss_cls: 0.0763  loss_bbox: 0.1579  loss_dir: 0.0145
2024/04/23 16:03:36 - mmengine - INFO - Epoch(train)  [1][ 750/1238]  lr: 2.8764e-04  eta: 5:06:05  time: 0.2728  data_time: 0.0029  memory: 3155  grad_norm: 0.5196  loss: 0.2384  loss_cls: 0.0753  loss_bbox: 0.1500  loss_dir: 0.0132
2024/04/23 16:03:49 - mmengine - INFO - Epoch(train)  [1][ 800/1238]  lr: 2.9627e-04  eta: 5:00:35  time: 0.2743  data_time: 0.0033  memory: 3145  grad_norm: 0.5179  loss: 0.2357  loss_cls: 0.0694  loss_bbox: 0.1522  loss_dir: 0.0141
2024/04/23 16:04:03 - mmengine - INFO - Epoch(train)  [1][ 850/1238]  lr: 3.0545e-04  eta: 4:55:41  time: 0.2738  data_time: 0.0037  memory: 3129  grad_norm: 0.4904  loss: 0.2466  loss_cls: 0.0766  loss_bbox: 0.1536  loss_dir: 0.0164
2024/04/23 16:04:17 - mmengine - INFO - Epoch(train)  [1][ 900/1238]  lr: 3.1519e-04  eta: 4:51:13  time: 0.2722  data_time: 0.0026  memory: 3156  grad_norm: 0.4942  loss: 0.2427  loss_cls: 0.0739  loss_bbox: 0.1533  loss_dir: 0.0155
2024/04/23 16:04:30 - mmengine - INFO - Epoch(train)  [1][ 950/1238]  lr: 3.2548e-04  eta: 4:47:16  time: 0.2737  data_time: 0.0025  memory: 3141  grad_norm: 0.4812  loss: 0.2393  loss_cls: 0.0740  loss_bbox: 0.1523  loss_dir: 0.0130
2024/04/23 16:04:44 - mmengine - INFO - Exp name: adversarial-second_hv_secfpn_8xb6-80e_kitti-3d-car_20240423_155835
2024/04/23 16:04:44 - mmengine - INFO - Epoch(train)  [1][1000/1238]  lr: 3.3632e-04  eta: 4:43:35  time: 0.2713  data_time: 0.0026  memory: 3146  grad_norm: 0.5246  loss: 0.2423  loss_cls: 0.0761  loss_bbox: 0.1517  loss_dir: 0.0145
2024/04/23 16:04:58 - mmengine - INFO - Epoch(train)  [1][1050/1238]  lr: 3.4772e-04  eta: 4:40:22  time: 0.2747  data_time: 0.0031  memory: 3124  grad_norm: 0.5102  loss: 0.2542  loss_cls: 0.0792  loss_bbox: 0.1592  loss_dir: 0.0158
2024/04/23 16:05:11 - mmengine - INFO - Epoch(train)  [1][1100/1238]  lr: 3.5967e-04  eta: 4:37:28  time: 0.2756  data_time: 0.0024  memory: 3154  grad_norm: 0.4990  loss: 0.2446  loss_cls: 0.0745  loss_bbox: 0.1559  loss_dir: 0.0141
2024/04/23 16:05:25 - mmengine - INFO - Epoch(train)  [1][1150/1238]  lr: 3.7217e-04  eta: 4:34:45  time: 0.2748  data_time: 0.0026  memory: 3180  grad_norm: 0.5227  loss: 0.2471  loss_cls: 0.0728  loss_bbox: 0.1590  loss_dir: 0.0153
2024/04/23 16:05:39 - mmengine - INFO - Epoch(train)  [1][1200/1238]  lr: 3.8521e-04  eta: 4:32:11  time: 0.2724  data_time: 0.0037  memory: 3131  grad_norm: 0.5135  loss: 0.2388  loss_cls: 0.0724  loss_bbox: 0.1508  loss_dir: 0.0156
2024/04/23 16:05:49 - mmengine - INFO - Exp name: adversarial-second_hv_secfpn_8xb6-80e_kitti-3d-car_20240423_155835
2024/04/23 16:06:04 - mmengine - INFO - Epoch(val)  [1][  50/3769]    eta: 0:18:00  time: 0.2905  data_time: 0.2532  memory: 3129  
2024/04/23 16:06:05 - mmengine - INFO - Epoch(val)  [1][ 100/3769]    eta: 0:09:54  time: 0.0334  data_time: 0.0004  memory: 249  
2024/04/23 16:06:07 - mmengine - INFO - Epoch(val)  [1][ 150/3769]    eta: 0:07:10  time: 0.0328  data_time: 0.0010  memory: 249  
2024/04/23 16:06:08 - mmengine - INFO - Epoch(val)  [1][ 200/3769]    eta: 0:05:47  time: 0.0325  data_time: 0.0004  memory: 249  
2024/04/23 16:06:10 - mmengine - INFO - Epoch(val)  [1][ 250/3769]    eta: 0:04:56  time: 0.0324  data_time: 0.0008  memory: 249  
2024/04/23 16:06:12 - mmengine - INFO - Epoch(val)  [1][ 300/3769]    eta: 0:04:22  time: 0.0328  data_time: 0.0010  memory: 249  
2024/04/23 16:06:13 - mmengine - INFO - Epoch(val)  [1][ 350/3769]    eta: 0:03:57  time: 0.0321  data_time: 0.0003  memory: 249  
2024/04/23 16:06:15 - mmengine - INFO - Epoch(val)  [1][ 400/3769]    eta: 0:03:38  time: 0.0323  data_time: 0.0005  memory: 249  
2024/04/23 16:06:17 - mmengine - INFO - Epoch(val)  [1][ 450/3769]    eta: 0:03:23  time: 0.0336  data_time: 0.0007  memory: 249  
2024/04/23 16:06:18 - mmengine - INFO - Epoch(val)  [1][ 500/3769]    eta: 0:03:11  time: 0.0323  data_time: 0.0002  memory: 249  
2024/04/23 16:06:20 - mmengine - INFO - Epoch(val)  [1][ 550/3769]    eta: 0:03:00  time: 0.0332  data_time: 0.0008  memory: 249  
2024/04/23 16:06:21 - mmengine - INFO - Epoch(val)  [1][ 600/3769]    eta: 0:02:51  time: 0.0319  data_time: 0.0002  memory: 249  
2024/04/23 16:06:23 - mmengine - INFO - Epoch(val)  [1][ 650/3769]    eta: 0:02:43  time: 0.0324  data_time: 0.0005  memory: 249  
2024/04/23 16:06:25 - mmengine - INFO - Epoch(val)  [1][ 700/3769]    eta: 0:02:36  time: 0.0324  data_time: 0.0004  memory: 249  
2024/04/23 16:06:26 - mmengine - INFO - Epoch(val)  [1][ 750/3769]    eta: 0:02:30  time: 0.0320  data_time: 0.0003  memory: 249  
2024/04/23 16:06:28 - mmengine - INFO - Epoch(val)  [1][ 800/3769]    eta: 0:02:24  time: 0.0329  data_time: 0.0005  memory: 249  
2024/04/23 16:06:30 - mmengine - INFO - Epoch(val)  [1][ 850/3769]    eta: 0:02:19  time: 0.0324  data_time: 0.0007  memory: 249  
2024/04/23 16:06:31 - mmengine - INFO - Epoch(val)  [1][ 900/3769]    eta: 0:02:14  time: 0.0325  data_time: 0.0007  memory: 249  
2024/04/23 16:06:33 - mmengine - INFO - Epoch(val)  [1][ 950/3769]    eta: 0:02:10  time: 0.0330  data_time: 0.0008  memory: 249  
2024/04/23 16:06:34 - mmengine - INFO - Epoch(val)  [1][1000/3769]    eta: 0:02:05  time: 0.0317  data_time: 0.0006  memory: 249  
2024/04/23 16:06:36 - mmengine - INFO - Epoch(val)  [1][1050/3769]    eta: 0:02:01  time: 0.0324  data_time: 0.0006  memory: 249  
2024/04/23 16:06:38 - mmengine - INFO - Epoch(val)  [1][1100/3769]    eta: 0:01:58  time: 0.0320  data_time: 0.0005  memory: 249  
2024/04/23 16:06:39 - mmengine - INFO - Epoch(val)  [1][1150/3769]    eta: 0:01:54  time: 0.0322  data_time: 0.0002  memory: 249  
2024/04/23 16:06:41 - mmengine - INFO - Epoch(val)  [1][1200/3769]    eta: 0:01:51  time: 0.0321  data_time: 0.0001  memory: 249  
2024/04/23 16:06:43 - mmengine - INFO - Epoch(val)  [1][1250/3769]    eta: 0:01:47  time: 0.0327  data_time: 0.0004  memory: 249  
2024/04/23 16:06:44 - mmengine - INFO - Epoch(val)  [1][1300/3769]    eta: 0:01:44  time: 0.0328  data_time: 0.0006  memory: 249  
2024/04/23 16:06:46 - mmengine - INFO - Epoch(val)  [1][1350/3769]    eta: 0:01:41  time: 0.0329  data_time: 0.0006  memory: 249  
2024/04/23 16:06:47 - mmengine - INFO - Epoch(val)  [1][1400/3769]    eta: 0:01:38  time: 0.0326  data_time: 0.0005  memory: 249  
2024/04/23 16:06:49 - mmengine - INFO - Epoch(val)  [1][1450/3769]    eta: 0:01:36  time: 0.0322  data_time: 0.0005  memory: 249  
2024/04/23 16:06:51 - mmengine - INFO - Epoch(val)  [1][1500/3769]    eta: 0:01:33  time: 0.0328  data_time: 0.0007  memory: 249  
2024/04/23 16:06:52 - mmengine - INFO - Epoch(val)  [1][1550/3769]    eta: 0:01:30  time: 0.0325  data_time: 0.0011  memory: 249  
2024/04/23 16:06:54 - mmengine - INFO - Epoch(val)  [1][1600/3769]    eta: 0:01:28  time: 0.0333  data_time: 0.0011  memory: 249  
2024/04/23 16:06:56 - mmengine - INFO - Epoch(val)  [1][1650/3769]    eta: 0:01:25  time: 0.0340  data_time: 0.0003  memory: 249  
2024/04/23 16:06:57 - mmengine - INFO - Epoch(val)  [1][1700/3769]    eta: 0:01:23  time: 0.0326  data_time: 0.0002  memory: 249  
2024/04/23 16:06:59 - mmengine - INFO - Epoch(val)  [1][1750/3769]    eta: 0:01:20  time: 0.0320  data_time: 0.0007  memory: 249  
2024/04/23 16:07:01 - mmengine - INFO - Epoch(val)  [1][1800/3769]    eta: 0:01:18  time: 0.0325  data_time: 0.0003  memory: 249  
2024/04/23 16:07:02 - mmengine - INFO - Epoch(val)  [1][1850/3769]    eta: 0:01:15  time: 0.0328  data_time: 0.0005  memory: 249  
2024/04/23 16:07:04 - mmengine - INFO - Epoch(val)  [1][1900/3769]    eta: 0:01:13  time: 0.0324  data_time: 0.0003  memory: 249  
2024/04/23 16:07:06 - mmengine - INFO - Epoch(val)  [1][1950/3769]    eta: 0:01:11  time: 0.0328  data_time: 0.0004  memory: 249  
2024/04/23 16:07:07 - mmengine - INFO - Epoch(val)  [1][2000/3769]    eta: 0:01:09  time: 0.0326  data_time: 0.0004  memory: 249  
2024/04/23 16:07:09 - mmengine - INFO - Epoch(val)  [1][2050/3769]    eta: 0:01:06  time: 0.0323  data_time: 0.0005  memory: 249  
2024/04/23 16:07:10 - mmengine - INFO - Epoch(val)  [1][2100/3769]    eta: 0:01:04  time: 0.0321  data_time: 0.0003  memory: 249  
2024/04/23 16:07:12 - mmengine - INFO - Epoch(val)  [1][2150/3769]    eta: 0:01:02  time: 0.0321  data_time: 0.0003  memory: 249  
2024/04/23 16:07:14 - mmengine - INFO - Epoch(val)  [1][2200/3769]    eta: 0:01:00  time: 0.0328  data_time: 0.0002  memory: 249  
2024/04/23 16:07:15 - mmengine - INFO - Epoch(val)  [1][2250/3769]    eta: 0:00:58  time: 0.0320  data_time: 0.0007  memory: 249  
2024/04/23 16:07:17 - mmengine - INFO - Epoch(val)  [1][2300/3769]    eta: 0:00:56  time: 0.0338  data_time: 0.0005  memory: 249  
2024/04/23 16:07:19 - mmengine - INFO - Epoch(val)  [1][2350/3769]    eta: 0:00:54  time: 0.0326  data_time: 0.0002  memory: 249  
2024/04/23 16:07:20 - mmengine - INFO - Epoch(val)  [1][2400/3769]    eta: 0:00:51  time: 0.0322  data_time: 0.0002  memory: 249  
2024/04/23 16:07:22 - mmengine - INFO - Epoch(val)  [1][2450/3769]    eta: 0:00:49  time: 0.0331  data_time: 0.0006  memory: 249  
2024/04/23 16:07:23 - mmengine - INFO - Epoch(val)  [1][2500/3769]    eta: 0:00:47  time: 0.0323  data_time: 0.0006  memory: 249  
2024/04/23 16:07:25 - mmengine - INFO - Epoch(val)  [1][2550/3769]    eta: 0:00:45  time: 0.0325  data_time: 0.0009  memory: 249  
2024/04/23 16:07:27 - mmengine - INFO - Epoch(val)  [1][2600/3769]    eta: 0:00:43  time: 0.0330  data_time: 0.0007  memory: 249  
2024/04/23 16:07:28 - mmengine - INFO - Epoch(val)  [1][2650/3769]    eta: 0:00:41  time: 0.0329  data_time: 0.0005  memory: 249  
2024/04/23 16:07:30 - mmengine - INFO - Epoch(val)  [1][2700/3769]    eta: 0:00:39  time: 0.0334  data_time: 0.0007  memory: 249  
2024/04/23 16:07:32 - mmengine - INFO - Epoch(val)  [1][2750/3769]    eta: 0:00:37  time: 0.0325  data_time: 0.0004  memory: 249  
2024/04/23 16:07:33 - mmengine - INFO - Epoch(val)  [1][2800/3769]    eta: 0:00:36  time: 0.0329  data_time: 0.0011  memory: 249  
2024/04/23 16:07:35 - mmengine - INFO - Epoch(val)  [1][2850/3769]    eta: 0:00:34  time: 0.0321  data_time: 0.0003  memory: 249  
2024/04/23 16:07:37 - mmengine - INFO - Epoch(val)  [1][2900/3769]    eta: 0:00:32  time: 0.0326  data_time: 0.0006  memory: 249  
2024/04/23 16:07:38 - mmengine - INFO - Epoch(val)  [1][2950/3769]    eta: 0:00:30  time: 0.0336  data_time: 0.0014  memory: 249  
2024/04/23 16:07:40 - mmengine - INFO - Epoch(val)  [1][3000/3769]    eta: 0:00:28  time: 0.0330  data_time: 0.0005  memory: 249  
2024/04/23 16:07:42 - mmengine - INFO - Epoch(val)  [1][3050/3769]    eta: 0:00:26  time: 0.0333  data_time: 0.0005  memory: 249  
2024/04/23 16:07:43 - mmengine - INFO - Epoch(val)  [1][3100/3769]    eta: 0:00:24  time: 0.0328  data_time: 0.0007  memory: 249  
2024/04/23 16:07:45 - mmengine - INFO - Epoch(val)  [1][3150/3769]    eta: 0:00:22  time: 0.0330  data_time: 0.0007  memory: 249  
2024/04/23 16:07:47 - mmengine - INFO - Epoch(val)  [1][3200/3769]    eta: 0:00:20  time: 0.0338  data_time: 0.0003  memory: 249  
2024/04/23 16:07:48 - mmengine - INFO - Epoch(val)  [1][3250/3769]    eta: 0:00:19  time: 0.0329  data_time: 0.0008  memory: 249  
2024/04/23 16:07:50 - mmengine - INFO - Epoch(val)  [1][3300/3769]    eta: 0:00:17  time: 0.0335  data_time: 0.0013  memory: 249  
2024/04/23 16:07:52 - mmengine - INFO - Epoch(val)  [1][3350/3769]    eta: 0:00:15  time: 0.0337  data_time: 0.0011  memory: 249  
2024/04/23 16:07:53 - mmengine - INFO - Epoch(val)  [1][3400/3769]    eta: 0:00:13  time: 0.0332  data_time: 0.0004  memory: 249  
2024/04/23 16:07:55 - mmengine - INFO - Epoch(val)  [1][3450/3769]    eta: 0:00:11  time: 0.0325  data_time: 0.0013  memory: 249  
2024/04/23 16:07:56 - mmengine - INFO - Epoch(val)  [1][3500/3769]    eta: 0:00:09  time: 0.0328  data_time: 0.0005  memory: 249  
2024/04/23 16:07:58 - mmengine - INFO - Epoch(val)  [1][3550/3769]    eta: 0:00:07  time: 0.0333  data_time: 0.0012  memory: 249  
2024/04/23 16:08:00 - mmengine - INFO - Epoch(val)  [1][3600/3769]    eta: 0:00:06  time: 0.0330  data_time: 0.0004  memory: 249  
2024/04/23 16:08:02 - mmengine - INFO - Epoch(val)  [1][3650/3769]    eta: 0:00:04  time: 0.0353  data_time: 0.0009  memory: 249  
2024/04/23 16:08:03 - mmengine - INFO - Epoch(val)  [1][3700/3769]    eta: 0:00:02  time: 0.0334  data_time: 0.0011  memory: 249  
2024/04/23 16:08:05 - mmengine - INFO - Epoch(val)  [1][3750/3769]    eta: 0:00:00  time: 0.0332  data_time: 0.0003  memory: 249  
2024/04/23 16:09:00 - mmengine - INFO - Results of pred_instances_3d:

----------- AP11 Results ------------

Car AP11@0.70, 0.70, 0.70:
bbox AP11:94.9138, 89.7503, 88.0318
bev  AP11:90.0562, 87.3963, 84.0669
3d   AP11:88.6019, 78.4644, 76.2427
aos  AP11:94.77, 89.34, 87.48
Car AP11@0.70, 0.50, 0.50:
bbox AP11:94.9138, 89.7503, 88.0318
bev  AP11:95.0073, 90.0167, 88.7541
3d   AP11:94.9667, 89.9414, 88.5720
aos  AP11:94.77, 89.34, 87.48

----------- AP40 Results ------------

Car AP40@0.70, 0.70, 0.70:
bbox AP40:97.5609, 92.3894, 90.7403
bev  AP40:93.8239, 88.4417, 85.2125
3d   AP40:90.7487, 81.5795, 77.6819
aos  AP40:97.40, 91.92, 90.13
Car AP40@0.70, 0.50, 0.50:
bbox AP40:97.5609, 92.3894, 90.7403
bev  AP40:97.6492, 94.7499, 93.1079
3d   AP40:97.5236, 94.5673, 91.4432
aos  AP40:97.40, 91.92, 90.13

2024/04/23 16:09:00 - mmengine - INFO - Epoch(val) [1][3769/3769]    Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_strict: 88.6019  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_strict: 90.0562  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_strict: 94.9138  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_strict: 78.4644  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_strict: 87.3963  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_strict: 89.7503  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_strict: 76.2427  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_strict: 84.0669  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_strict: 88.0318  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_loose: 94.9667  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_loose: 95.0073  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_loose: 94.9138  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_loose: 89.9414  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_loose: 90.0167  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_loose: 89.7503  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_loose: 88.5720  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_loose: 88.7541  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_loose: 88.0318  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_strict: 90.7487  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_strict: 93.8239  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_strict: 97.5609  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_strict: 81.5795  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_strict: 88.4417  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_strict: 92.3894  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_strict: 77.6819  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_strict: 85.2125  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_strict: 90.7403  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_loose: 97.5236  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_loose: 97.6492  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_loose: 97.5609  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_loose: 94.5673  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_loose: 94.7499  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_loose: 92.3894  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_loose: 91.4432  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_loose: 93.1079  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_loose: 90.7403  data_time: 0.0039  time: 0.0362
2024/04/23 16:09:14 - mmengine - INFO - Epoch(train)  [2][  50/1238]  lr: 4.0951e-04  eta: 4:28:02  time: 0.2722  data_time: 0.0035  memory: 3134  grad_norm: 0.4852  loss: 0.2624  loss_cls: 0.0820  loss_bbox: 0.1636  loss_dir: 0.0168
2024/04/23 16:09:27 - mmengine - INFO - Epoch(train)  [2][ 100/1238]  lr: 4.2407e-04  eta: 4:25:47  time: 0.2679  data_time: 0.0025  memory: 3130  grad_norm: 0.4904  loss: 0.2399  loss_cls: 0.0728  loss_bbox: 0.1520  loss_dir: 0.0151
2024/04/23 16:09:40 - mmengine - INFO - Epoch(train)  [2][ 150/1238]  lr: 4.3918e-04  eta: 4:23:42  time: 0.2684  data_time: 0.0027  memory: 3127  grad_norm: 0.5050  loss: 0.2430  loss_cls: 0.0736  loss_bbox: 0.1562  loss_dir: 0.0133
2024/04/23 16:09:54 - mmengine - INFO - Epoch(train)  [2][ 200/1238]  lr: 4.5483e-04  eta: 4:21:47  time: 0.2696  data_time: 0.0029  memory: 3145  grad_norm: 0.5113  loss: 0.2484  loss_cls: 0.0759  loss_bbox: 0.1586  loss_dir: 0.0139
2024/04/23 16:10:08 - mmengine - INFO - Epoch(train)  [2][ 250/1238]  lr: 4.7102e-04  eta: 4:20:03  time: 0.2721  data_time: 0.0027  memory: 3134  grad_norm: 0.5315  loss: 0.2471  loss_cls: 0.0757  loss_bbox: 0.1546  loss_dir: 0.0169
2024/04/23 16:10:21 - mmengine - INFO - Epoch(train)  [2][ 300/1238]  lr: 4.8776e-04  eta: 4:18:23  time: 0.2714  data_time: 0.0024  memory: 3136  grad_norm: 0.4976  loss: 0.2434  loss_cls: 0.0729  loss_bbox: 0.1558  loss_dir: 0.0147
2024/04/23 16:10:35 - mmengine - INFO - Epoch(train)  [2][ 350/1238]  lr: 5.0505e-04  eta: 4:16:51  time: 0.2727  data_time: 0.0026  memory: 3137  grad_norm: 0.5002  loss: 0.2400  loss_cls: 0.0746  loss_bbox: 0.1511  loss_dir: 0.0142
2024/04/23 16:10:48 - mmengine - INFO - Epoch(train)  [2][ 400/1238]  lr: 5.2287e-04  eta: 4:15:22  time: 0.2714  data_time: 0.0025  memory: 3152  grad_norm: 0.5437  loss: 0.2530  loss_cls: 0.0777  loss_bbox: 0.1593  loss_dir: 0.0160
2024/04/23 16:11:02 - mmengine - INFO - Epoch(train)  [2][ 450/1238]  lr: 5.4123e-04  eta: 4:14:00  time: 0.2734  data_time: 0.0022  memory: 3137  grad_norm: 0.5101  loss: 0.2562  loss_cls: 0.0806  loss_bbox: 0.1609  loss_dir: 0.0147
2024/04/23 16:11:16 - mmengine - INFO - Epoch(train)  [2][ 500/1238]  lr: 5.6013e-04  eta: 4:12:41  time: 0.2727  data_time: 0.0027  memory: 3157  grad_norm: 0.4983  loss: 0.2541  loss_cls: 0.0780  loss_bbox: 0.1595  loss_dir: 0.0166
2024/04/23 16:11:29 - mmengine - INFO - Epoch(train)  [2][ 550/1238]  lr: 5.7957e-04  eta: 4:11:24  time: 0.2719  data_time: 0.0023  memory: 3132  grad_norm: 0.5348  loss: 0.2512  loss_cls: 0.0799  loss_bbox: 0.1565  loss_dir: 0.0149
2024/04/23 16:11:43 - mmengine - INFO - Epoch(train)  [2][ 600/1238]  lr: 5.9955e-04  eta: 4:10:17  time: 0.2764  data_time: 0.0039  memory: 3149  grad_norm: 0.5551  loss: 0.2402  loss_cls: 0.0721  loss_bbox: 0.1533  loss_dir: 0.0148
2024/04/23 16:11:57 - mmengine - INFO - Epoch(train)  [2][ 650/1238]  lr: 6.2006e-04  eta: 4:09:07  time: 0.2720  data_time: 0.0019  memory: 3128  grad_norm: 0.4910  loss: 0.2434  loss_cls: 0.0756  loss_bbox: 0.1526  loss_dir: 0.0151
2024/04/23 16:12:10 - mmengine - INFO - Epoch(train)  [2][ 700/1238]  lr: 6.4111e-04  eta: 4:08:01  time: 0.2732  data_time: 0.0023  memory: 3136  grad_norm: 0.5155  loss: 0.2488  loss_cls: 0.0776  loss_bbox: 0.1550  loss_dir: 0.0162
2024/04/23 16:12:24 - mmengine - INFO - Epoch(train)  [2][ 750/1238]  lr: 6.6269e-04  eta: 4:07:00  time: 0.2744  data_time: 0.0017  memory: 3126  grad_norm: 0.5131  loss: 0.2416  loss_cls: 0.0730  loss_bbox: 0.1529  loss_dir: 0.0157
2024/04/23 16:12:27 - mmengine - INFO - Exp name: adversarial-second_hv_secfpn_8xb6-80e_kitti-3d-car_20240423_155835
2024/04/23 16:12:38 - mmengine - INFO - Epoch(train)  [2][ 800/1238]  lr: 6.8480e-04  eta: 4:05:57  time: 0.2712  data_time: 0.0036  memory: 3145  grad_norm: 0.5257  loss: 0.2486  loss_cls: 0.0763  loss_bbox: 0.1580  loss_dir: 0.0143
2024/04/23 16:12:51 - mmengine - INFO - Epoch(train)  [2][ 850/1238]  lr: 7.0744e-04  eta: 4:04:58  time: 0.2724  data_time: 0.0022  memory: 3161  grad_norm: 0.5230  loss: 0.2453  loss_cls: 0.0769  loss_bbox: 0.1540  loss_dir: 0.0145
2024/04/23 16:13:05 - mmengine - INFO - Epoch(train)  [2][ 900/1238]  lr: 7.3061e-04  eta: 4:04:01  time: 0.2727  data_time: 0.0028  memory: 3159  grad_norm: 0.5270  loss: 0.2508  loss_cls: 0.0777  loss_bbox: 0.1587  loss_dir: 0.0144
2024/04/23 16:13:19 - mmengine - INFO - Epoch(train)  [2][ 950/1238]  lr: 7.5431e-04  eta: 4:03:07  time: 0.2736  data_time: 0.0031  memory: 3117  grad_norm: 0.5238  loss: 0.2427  loss_cls: 0.0720  loss_bbox: 0.1557  loss_dir: 0.0149
2024/04/23 16:13:32 - mmengine - INFO - Epoch(train)  [2][1000/1238]  lr: 7.7853e-04  eta: 4:02:15  time: 0.2727  data_time: 0.0024  memory: 3144  grad_norm: 0.5150  loss: 0.2453  loss_cls: 0.0749  loss_bbox: 0.1550  loss_dir: 0.0155
2024/04/23 16:13:46 - mmengine - INFO - Epoch(train)  [2][1050/1238]  lr: 8.0327e-04  eta: 4:01:23  time: 0.2727  data_time: 0.0027  memory: 3179  grad_norm: 0.5270  loss: 0.2543  loss_cls: 0.0774  loss_bbox: 0.1624  loss_dir: 0.0145
2024/04/23 16:13:59 - mmengine - INFO - Epoch(train)  [2][1100/1238]  lr: 8.2854e-04  eta: 4:00:34  time: 0.2728  data_time: 0.0030  memory: 3159  grad_norm: 0.4892  loss: 0.2499  loss_cls: 0.0759  loss_bbox: 0.1582  loss_dir: 0.0159
2024/04/23 16:14:13 - mmengine - INFO - Epoch(train)  [2][1150/1238]  lr: 8.5433e-04  eta: 3:59:47  time: 0.2738  data_time: 0.0025  memory: 3129  grad_norm: 0.5161  loss: 0.2426  loss_cls: 0.0772  loss_bbox: 0.1500  loss_dir: 0.0154
2024/04/23 16:14:27 - mmengine - INFO - Epoch(train)  [2][1200/1238]  lr: 8.8064e-04  eta: 3:59:00  time: 0.2721  data_time: 0.0023  memory: 3154  grad_norm: 0.5420  loss: 0.2485  loss_cls: 0.0765  loss_bbox: 0.1581  loss_dir: 0.0139
2024/04/23 16:14:37 - mmengine - INFO - Exp name: adversarial-second_hv_secfpn_8xb6-80e_kitti-3d-car_20240423_155835
2024/04/23 16:14:39 - mmengine - INFO - Epoch(val)  [2][  50/3769]    eta: 0:02:02  time: 0.0329  data_time: 0.0016  memory: 3135  
2024/04/23 16:14:40 - mmengine - INFO - Epoch(val)  [2][ 100/3769]    eta: 0:02:00  time: 0.0326  data_time: 0.0009  memory: 249  
2024/04/23 16:14:42 - mmengine - INFO - Epoch(val)  [2][ 150/3769]    eta: 0:01:58  time: 0.0329  data_time: 0.0006  memory: 249  
2024/04/23 16:14:44 - mmengine - INFO - Epoch(val)  [2][ 200/3769]    eta: 0:01:56  time: 0.0319  data_time: 0.0005  memory: 249  
2024/04/23 16:14:45 - mmengine - INFO - Epoch(val)  [2][ 250/3769]    eta: 0:01:54  time: 0.0327  data_time: 0.0014  memory: 249  
2024/04/23 16:14:47 - mmengine - INFO - Epoch(val)  [2][ 300/3769]    eta: 0:01:53  time: 0.0329  data_time: 0.0005  memory: 249  
2024/04/23 16:14:48 - mmengine - INFO - Epoch(val)  [2][ 350/3769]    eta: 0:01:51  time: 0.0323  data_time: 0.0008  memory: 249  
2024/04/23 16:14:50 - mmengine - INFO - Epoch(val)  [2][ 400/3769]    eta: 0:01:50  time: 0.0333  data_time: 0.0013  memory: 249  
2024/04/23 16:14:52 - mmengine - INFO - Epoch(val)  [2][ 450/3769]    eta: 0:01:48  time: 0.0328  data_time: 0.0007  memory: 249  
2024/04/23 16:14:53 - mmengine - INFO - Epoch(val)  [2][ 500/3769]    eta: 0:01:46  time: 0.0325  data_time: 0.0004  memory: 249  
2024/04/23 16:14:55 - mmengine - INFO - Epoch(val)  [2][ 550/3769]    eta: 0:01:45  time: 0.0323  data_time: 0.0005  memory: 249  
2024/04/23 16:14:57 - mmengine - INFO - Epoch(val)  [2][ 600/3769]    eta: 0:01:43  time: 0.0329  data_time: 0.0005  memory: 249  
2024/04/23 16:14:58 - mmengine - INFO - Epoch(val)  [2][ 650/3769]    eta: 0:01:41  time: 0.0322  data_time: 0.0004  memory: 249  
2024/04/23 16:15:00 - mmengine - INFO - Epoch(val)  [2][ 700/3769]    eta: 0:01:40  time: 0.0324  data_time: 0.0001  memory: 249  
2024/04/23 16:15:01 - mmengine - INFO - Epoch(val)  [2][ 750/3769]    eta: 0:01:38  time: 0.0324  data_time: 0.0004  memory: 249  
2024/04/23 16:15:03 - mmengine - INFO - Epoch(val)  [2][ 800/3769]    eta: 0:01:36  time: 0.0332  data_time: 0.0004  memory: 249  
2024/04/23 16:15:05 - mmengine - INFO - Epoch(val)  [2][ 850/3769]    eta: 0:01:35  time: 0.0323  data_time: 0.0008  memory: 249  
2024/04/23 16:15:06 - mmengine - INFO - Epoch(val)  [2][ 900/3769]    eta: 0:01:33  time: 0.0325  data_time: 0.0009  memory: 249  
2024/04/23 16:15:08 - mmengine - INFO - Epoch(val)  [2][ 950/3769]    eta: 0:01:31  time: 0.0326  data_time: 0.0005  memory: 249  
2024/04/23 16:15:10 - mmengine - INFO - Epoch(val)  [2][1000/3769]    eta: 0:01:30  time: 0.0319  data_time: 0.0011  memory: 249  
2024/04/23 16:15:11 - mmengine - INFO - Epoch(val)  [2][1050/3769]    eta: 0:01:28  time: 0.0326  data_time: 0.0004  memory: 249  
2024/04/23 16:15:13 - mmengine - INFO - Epoch(val)  [2][1100/3769]    eta: 0:01:27  time: 0.0330  data_time: 0.0007  memory: 249  
2024/04/23 16:15:14 - mmengine - INFO - Epoch(val)  [2][1150/3769]    eta: 0:01:25  time: 0.0324  data_time: 0.0008  memory: 249  
2024/04/23 16:15:16 - mmengine - INFO - Epoch(val)  [2][1200/3769]    eta: 0:01:23  time: 0.0331  data_time: 0.0006  memory: 249  
2024/04/23 16:15:18 - mmengine - INFO - Epoch(val)  [2][1250/3769]    eta: 0:01:22  time: 0.0324  data_time: 0.0004  memory: 249  
2024/04/23 16:15:19 - mmengine - INFO - Epoch(val)  [2][1300/3769]    eta: 0:01:20  time: 0.0324  data_time: 0.0001  memory: 249  
2024/04/23 16:15:21 - mmengine - INFO - Epoch(val)  [2][1350/3769]    eta: 0:01:18  time: 0.0326  data_time: 0.0004  memory: 249  
2024/04/23 16:15:23 - mmengine - INFO - Epoch(val)  [2][1400/3769]    eta: 0:01:17  time: 0.0326  data_time: 0.0006  memory: 249  
2024/04/23 16:15:24 - mmengine - INFO - Epoch(val)  [2][1450/3769]    eta: 0:01:15  time: 0.0321  data_time: 0.0003  memory: 249  
2024/04/23 16:15:26 - mmengine - INFO - Epoch(val)  [2][1500/3769]    eta: 0:01:13  time: 0.0330  data_time: 0.0002  memory: 249  
2024/04/23 16:15:28 - mmengine - INFO - Epoch(val)  [2][1550/3769]    eta: 0:01:12  time: 0.0324  data_time: 0.0013  memory: 249  
2024/04/23 16:15:29 - mmengine - INFO - Epoch(val)  [2][1600/3769]    eta: 0:01:10  time: 0.0328  data_time: 0.0005  memory: 249  
2024/04/23 16:15:31 - mmengine - INFO - Epoch(val)  [2][1650/3769]    eta: 0:01:09  time: 0.0322  data_time: 0.0011  memory: 249  
2024/04/23 16:15:32 - mmengine - INFO - Epoch(val)  [2][1700/3769]    eta: 0:01:07  time: 0.0320  data_time: 0.0001  memory: 249  
2024/04/23 16:15:34 - mmengine - INFO - Epoch(val)  [2][1750/3769]    eta: 0:01:05  time: 0.0334  data_time: 0.0001  memory: 249  
2024/04/23 16:15:36 - mmengine - INFO - Epoch(val)  [2][1800/3769]    eta: 0:01:04  time: 0.0330  data_time: 0.0011  memory: 249  
2024/04/23 16:15:37 - mmengine - INFO - Epoch(val)  [2][1850/3769]    eta: 0:01:02  time: 0.0325  data_time: 0.0006  memory: 249  
2024/04/23 16:15:39 - mmengine - INFO - Epoch(val)  [2][1900/3769]    eta: 0:01:00  time: 0.0323  data_time: 0.0004  memory: 249  
2024/04/23 16:15:41 - mmengine - INFO - Epoch(val)  [2][1950/3769]    eta: 0:00:59  time: 0.0327  data_time: 0.0002  memory: 249  
2024/04/23 16:15:42 - mmengine - INFO - Epoch(val)  [2][2000/3769]    eta: 0:00:57  time: 0.0320  data_time: 0.0002  memory: 249  
2024/04/23 16:15:44 - mmengine - INFO - Epoch(val)  [2][2050/3769]    eta: 0:00:56  time: 0.0331  data_time: 0.0006  memory: 249  
2024/04/23 16:15:46 - mmengine - INFO - Epoch(val)  [2][2100/3769]    eta: 0:00:54  time: 0.0323  data_time: 0.0005  memory: 249  
2024/04/23 16:15:47 - mmengine - INFO - Epoch(val)  [2][2150/3769]    eta: 0:00:52  time: 0.0324  data_time: 0.0005  memory: 249  
2024/04/23 16:15:49 - mmengine - INFO - Epoch(val)  [2][2200/3769]    eta: 0:00:51  time: 0.0317  data_time: 0.0005  memory: 249  
2024/04/23 16:15:50 - mmengine - INFO - Epoch(val)  [2][2250/3769]    eta: 0:00:49  time: 0.0323  data_time: 0.0005  memory: 249  
2024/04/23 16:15:52 - mmengine - INFO - Epoch(val)  [2][2300/3769]    eta: 0:00:47  time: 0.0322  data_time: 0.0009  memory: 249  
2024/04/23 16:15:54 - mmengine - INFO - Epoch(val)  [2][2350/3769]    eta: 0:00:46  time: 0.0324  data_time: 0.0005  memory: 249  
2024/04/23 16:15:55 - mmengine - INFO - Epoch(val)  [2][2400/3769]    eta: 0:00:44  time: 0.0335  data_time: 0.0007  memory: 249  
2024/04/23 16:15:57 - mmengine - INFO - Epoch(val)  [2][2450/3769]    eta: 0:00:42  time: 0.0322  data_time: 0.0006  memory: 249  
2024/04/23 16:15:59 - mmengine - INFO - Epoch(val)  [2][2500/3769]    eta: 0:00:41  time: 0.0331  data_time: 0.0002  memory: 249  
2024/04/23 16:16:00 - mmengine - INFO - Epoch(val)  [2][2550/3769]    eta: 0:00:39  time: 0.0322  data_time: 0.0008  memory: 249  
2024/04/23 16:16:02 - mmengine - INFO - Epoch(val)  [2][2600/3769]    eta: 0:00:38  time: 0.0325  data_time: 0.0009  memory: 249  
2024/04/23 16:16:03 - mmengine - INFO - Epoch(val)  [2][2650/3769]    eta: 0:00:36  time: 0.0325  data_time: 0.0003  memory: 249  
2024/04/23 16:16:05 - mmengine - INFO - Epoch(val)  [2][2700/3769]    eta: 0:00:34  time: 0.0328  data_time: 0.0006  memory: 249  
2024/04/23 16:16:07 - mmengine - INFO - Epoch(val)  [2][2750/3769]    eta: 0:00:33  time: 0.0319  data_time: 0.0007  memory: 249  
2024/04/23 16:16:08 - mmengine - INFO - Epoch(val)  [2][2800/3769]    eta: 0:00:31  time: 0.0339  data_time: 0.0004  memory: 249  
2024/04/23 16:16:10 - mmengine - INFO - Epoch(val)  [2][2850/3769]    eta: 0:00:29  time: 0.0329  data_time: 0.0010  memory: 249  
2024/04/23 16:16:12 - mmengine - INFO - Epoch(val)  [2][2900/3769]    eta: 0:00:28  time: 0.0322  data_time: 0.0005  memory: 249  
2024/04/23 16:16:13 - mmengine - INFO - Epoch(val)  [2][2950/3769]    eta: 0:00:26  time: 0.0327  data_time: 0.0006  memory: 249  
2024/04/23 16:16:15 - mmengine - INFO - Epoch(val)  [2][3000/3769]    eta: 0:00:25  time: 0.0324  data_time: 0.0007  memory: 249  
2024/04/23 16:16:16 - mmengine - INFO - Epoch(val)  [2][3050/3769]    eta: 0:00:23  time: 0.0321  data_time: 0.0004  memory: 249  
2024/04/23 16:16:18 - mmengine - INFO - Epoch(val)  [2][3100/3769]    eta: 0:00:21  time: 0.0323  data_time: 0.0007  memory: 249  
2024/04/23 16:16:20 - mmengine - INFO - Epoch(val)  [2][3150/3769]    eta: 0:00:20  time: 0.0336  data_time: 0.0009  memory: 249  
2024/04/23 16:16:21 - mmengine - INFO - Epoch(val)  [2][3200/3769]    eta: 0:00:18  time: 0.0333  data_time: 0.0009  memory: 249  
2024/04/23 16:16:23 - mmengine - INFO - Epoch(val)  [2][3250/3769]    eta: 0:00:16  time: 0.0320  data_time: 0.0007  memory: 249  
2024/04/23 16:16:25 - mmengine - INFO - Epoch(val)  [2][3300/3769]    eta: 0:00:15  time: 0.0323  data_time: 0.0009  memory: 249  
2024/04/23 16:16:26 - mmengine - INFO - Epoch(val)  [2][3350/3769]    eta: 0:00:13  time: 0.0326  data_time: 0.0008  memory: 249  
2024/04/23 16:16:28 - mmengine - INFO - Epoch(val)  [2][3400/3769]    eta: 0:00:12  time: 0.0324  data_time: 0.0005  memory: 249  
2024/04/23 16:16:30 - mmengine - INFO - Epoch(val)  [2][3450/3769]    eta: 0:00:10  time: 0.0320  data_time: 0.0006  memory: 249  
2024/04/23 16:16:31 - mmengine - INFO - Epoch(val)  [2][3500/3769]    eta: 0:00:08  time: 0.0328  data_time: 0.0003  memory: 249  
2024/04/23 16:16:33 - mmengine - INFO - Epoch(val)  [2][3550/3769]    eta: 0:00:07  time: 0.0330  data_time: 0.0005  memory: 249  
2024/04/23 16:16:34 - mmengine - INFO - Epoch(val)  [2][3600/3769]    eta: 0:00:05  time: 0.0325  data_time: 0.0006  memory: 249  
2024/04/23 16:16:36 - mmengine - INFO - Epoch(val)  [2][3650/3769]    eta: 0:00:03  time: 0.0326  data_time: 0.0010  memory: 249  
2024/04/23 16:16:38 - mmengine - INFO - Epoch(val)  [2][3700/3769]    eta: 0:00:02  time: 0.0320  data_time: 0.0005  memory: 249  
2024/04/23 16:16:39 - mmengine - INFO - Epoch(val)  [2][3750/3769]    eta: 0:00:00  time: 0.0319  data_time: 0.0006  memory: 249  
2024/04/23 16:16:57 - mmengine - INFO - Results of pred_instances_3d:

----------- AP11 Results ------------

Car AP11@0.70, 0.70, 0.70:
bbox AP11:94.5134, 89.7540, 88.0372
bev  AP11:90.2817, 87.7591, 84.3228
3d   AP11:88.7483, 78.5681, 76.4133
aos  AP11:94.34, 89.38, 87.43
Car AP11@0.70, 0.50, 0.50:
bbox AP11:94.5134, 89.7540, 88.0372
bev  AP11:94.6024, 90.0016, 88.8037
3d   AP11:94.5665, 89.9189, 88.5969
aos  AP11:94.34, 89.38, 87.43

----------- AP40 Results ------------

Car AP40@0.70, 0.70, 0.70:
bbox AP40:97.7335, 92.3987, 89.2334
bev  AP40:94.4084, 88.7461, 85.5555
3d   AP40:90.8487, 81.5710, 76.4922
aos  AP40:97.55, 91.98, 88.59
Car AP40@0.70, 0.50, 0.50:
bbox AP40:97.7335, 92.3987, 89.2334
bev  AP40:97.8399, 94.6909, 91.7009
3d   AP40:97.8150, 94.5042, 91.4682
aos  AP40:97.55, 91.98, 88.59

2024/04/23 16:16:57 - mmengine - INFO - Epoch(val) [2][3769/3769]    Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_strict: 88.7483  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_strict: 90.2817  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_strict: 94.5134  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_strict: 78.5681  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_strict: 87.7591  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_strict: 89.7540  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_strict: 76.4133  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_strict: 84.3228  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_strict: 88.0372  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_easy_loose: 94.5665  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_easy_loose: 94.6024  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_easy_loose: 94.5134  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_moderate_loose: 89.9189  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_moderate_loose: 90.0016  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_moderate_loose: 89.7540  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP11_hard_loose: 88.5969  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP11_hard_loose: 88.8037  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP11_hard_loose: 88.0372  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_strict: 90.8487  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_strict: 94.4084  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_strict: 97.7335  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_strict: 81.5710  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_strict: 88.7461  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_strict: 92.3987  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_strict: 76.4922  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_strict: 85.5555  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_strict: 89.2334  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_easy_loose: 97.8150  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_easy_loose: 97.8399  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_easy_loose: 97.7335  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_moderate_loose: 94.5042  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_moderate_loose: 94.6909  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_moderate_loose: 92.3987  Kitti metric/pred_instances_3d/KITTI/Car_3D_AP40_hard_loose: 91.4682  Kitti metric/pred_instances_3d/KITTI/Car_BEV_AP40_hard_loose: 91.7009  Kitti metric/pred_instances_3d/KITTI/Car_2D_AP40_hard_loose: 89.2334  data_time: 0.0006  time: 0.0326
2024/04/23 16:17:11 - mmengine - INFO - Epoch(train)  [3][  50/1238]  lr: 9.2820e-04  eta: 3:57:46  time: 0.2809  data_time: 0.0052  memory: 3141  grad_norm: 0.5168  loss: 0.2383  loss_cls: 0.0723  loss_bbox: 0.1530  loss_dir: 0.0130
2024/04/23 16:17:25 - mmengine - INFO - Epoch(train)  [3][ 100/1238]  lr: 9.5593e-04  eta: 3:57:04  time: 0.2747  data_time: 0.0033  memory: 3158  grad_norm: 0.5420  loss: 0.2507  loss_cls: 0.0762  loss_bbox: 0.1589  loss_dir: 0.0156
